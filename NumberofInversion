Question => 
https://www.codingninjas.com/studio/problems/number-of-inversions_6840276?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems 


Optimal Solution

int merge(vector<int>&a, int low , int mid , int high)
{
    int temp1 = low; 
    int temp2 = mid+1;

    vector<int> v;
    int cnt=0;


    while((temp1 <= mid)&&(temp2<=high))
    {
        if(a[temp1]>a[temp2])
        {
            v.push_back(a[temp2]);

            cnt += (mid - temp1 + 1);

            temp2++;
            

        }
        else if(a[temp1] == a[temp2])
        {
            v.push_back(a[temp1]);
            temp1++;
        }
        else{
            v.push_back(a[temp1]);
            temp1++;
        }
    }

    while(temp1<=mid)
    {
        v.push_back(a[temp1]);
        temp1++;
    }
    while(temp2<=high)
    {
        v.push_back(a[temp2]);
        temp2++;
    }

    for(int i=low;i<=high;i++)
    {
        a[i]=v[i-low];
    }
    return cnt;
}

int mergeSort(vector<int>&a , int low, int high)
{   
    int cnt =0;
    if(low>=high)
    {
        return cnt;
    }

    int mid = (low + high)/2;
    cnt+= mergeSort(a, low , mid);
    cnt+=mergeSort(a,mid+1,high);
    cnt+=merge(a,low,mid,high);

    return cnt;
}

int numberOfInversions(vector<int>&a, int n) {
    // Write your code here.
    return mergeSort(a,0,a.size()-1);

}